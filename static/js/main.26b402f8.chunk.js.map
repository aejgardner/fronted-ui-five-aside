{"version":3,"sources":["components/Header.js","components/PlayerRating.js","components/Player/Player.js","data/axios.js","components/Player/index.js","data/actions/api.js","data/actions/state.js","components/Settings/ColourGrid.js","components/Settings/FootballKit.js","components/Settings/TeamName.js","components/Settings/Settings.js","components/Settings/index.js","components/Players/Players.js","components/Players/index.js","components/TeamGroup/TeamGroup.js","components/TeamGroup/index.js","components/Teams/Teams.js","components/Teams/index.js","components/Loading/Loading.js","components/Loading/index.js","components/History/History.js","components/History/index.js","App.js","data/initial.js","data/reducers.js","data/store.js","index.js"],"names":["Header","children","className","PlayerRating","fontColour","handleRange","style","color","type","min","max","step","onChange","Player","props","state","player_name","player","player_rating","editing","handleChange","bind","handleSubmit","handleDelete","handleEdit","this","setState","e","num","target","value","input","onDelete","preventDefault","onUpdate","rating","onSubmit","id","onClick","Component","axios","create","baseURL","headers","Accept","connect","dispatch","patch","then","data","editPlayer","patchPlayer","delete","removePlayer","ColourGrid","selectColour","class","data-colour","FootballKit","kitColour","backgroundColor","TeamName","placeholder","Settings","editingSettings","team_one_colour","team_two_colour","team_one_name","team_two_name","submitSettings","teamName","teamColour","chosenColour","dataset","colour","undefined","htmlFor","display","settings","saveTeamSettings","Players","handleClear","handleLoad","onClear","players","hidden","length","generateBtnDisabled","visibility","to","map","key","teamOneName","teamTwoName","teamOneColour","teamTwoColour","get","setPlayers","post","addPlayer","postPlayer","TeamGroup","averageRating","team","i","Teams","team_one_score","team_two_score","saved","onLoad","teamScore","setTimeout","team_one_players","filter","team_two_players","Math","round","reduce","acc","makeTeams","match","addMatchToHistory","postMatch","Loading","loaded","handleMount","history","saveHistory","History","handleClearHistory","clearHistory","App","basename","Fragment","exact","path","component","initial","reducer","action","playersUpdated","listItem","setSettings","resetHistory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAUeA,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,4BAAQC,UAAU,UACd,4BACKD,KCwBEE,EA3BM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAChC,OACI,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,wBAAwBI,MAAO,CAAEC,MAAOH,IACnD,0BAAMF,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,KACA,0BAAMA,UAAU,wBAAhB,OAEJ,2BACIA,UAAU,eACVM,KAAK,QACLC,IAAI,IACJC,IAAI,KACJC,KAAK,IACLC,SAAUP,MCoFXQ,E,kDAvGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,EAAKF,MAAMG,OAAOD,YAC/BE,cAAe,EAAKJ,MAAMG,OAAOC,cACjCC,SAAS,GAKb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKhB,YAAc,EAAKA,YAAYgB,KAAjB,gBAfJ,E,yDAoBfI,KAAKC,SAAS,CACVP,SAAS,M,kCAKLQ,GACR,IAAIC,EAAMD,EAAEE,OAAOC,MAEnBL,KAAKC,SAAS,CACVR,cAAeU,M,mCAKVD,GACT,IAAII,EAAQJ,EAAEE,OAAOC,MAErBL,KAAKC,SAAS,CACVV,YAAae,M,mCAKRJ,GACTF,KAAKX,MAAMkB,a,mCAIFL,GACTA,EAAEM,iBAEF,IAAIjB,EAAcS,KAAKV,MAAMC,YACzBE,EAAgBO,KAAKV,MAAMG,cAE/BO,KAAKC,SAAS,CACVP,SAAS,IAGbM,KAAKX,MAAMoB,SAASlB,EAAaE,K,+BAG3B,IAAD,OAEGD,EAAWQ,KAAKX,MAAhBG,OAFH,EAG4BQ,KAAKV,MAA9BI,EAHH,EAGGA,QAASH,EAHZ,EAGYA,YAEbmB,EAASlB,EAAOC,cAEpB,OACI,oCAEKC,EACG,0BACIjB,UAAU,qBACVkC,SAAUX,KAAKH,cAEf,2BACIpB,UAAU,QACVmC,GAAG,SACHzB,SAAUa,KAAKL,aACfU,MAAOd,IAEX,kBAAC,EAAD,CACIX,YAAa,SAACsB,GAAD,OAAO,EAAKtB,YAAYsB,IACrCvB,WAAW,UAEf,4BAAQF,UAAU,yBAAlB,WAIJ,uBAAGA,UAAU,UAAUe,EAAOD,aAElC,yBAAKd,UAAU,kBACX,uBAAGA,UAAU,iBAAiBiC,GAC9B,4BAAQjC,UAAU,eAAeoC,QAASb,KAAKD,YAA/C,QACA,4BAAQtB,UAAU,cAAcoC,QAASb,KAAKF,cAA9C,gB,GAjGCgB,a,QCDNC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,kDAETC,QAAS,CACLC,OAAQ,sBCSDC,cAAQ,MAPI,SAACC,EAAD,GAA2B,IAAd7B,EAAa,EAAbA,OACpC,MAAO,CACHiB,SAAU,SAAClB,EAAaE,GAAd,OAAgC4B,ECwBvB,SAACT,EAAIrB,EAAaE,GAAlB,OAAoC,SAAA4B,GAC3DN,EAAMO,MAAN,mBAAwBV,GAAM,CAC1BrB,YAAaA,EACbE,cAAeA,IAChB8B,MAAK,YAAe,IACb/B,EADY,EAAXgC,KACaA,KACpBH,EC1BkB,SAAC7B,GACvB,MAAO,CACHT,KAAM,cACNS,OAAQA,GDuBCiC,CAAWjC,QD9B+BkC,CAAYlC,EAAOoB,GAAIrB,EAAaE,KACvFc,SAAU,kBAAMc,GCkCKT,EDlCiBpB,EAAOoB,GCkCjB,SAAAS,GAChCN,EAAMY,OAAN,mBAAyBf,IAAMW,MAAK,WAChCF,EC1BoB,SAACT,GACzB,MAAO,CACH7B,KAAM,gBACN6B,GAAIA,GDuBKgB,CAAahB,UAFF,IAACA,MD9BdQ,CAAkChC,G,eGQlCyC,EArBI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAClB,OACI,oCACI,yBAAKC,MAAM,cAAclB,QAASiB,GAC9B,yBAAKrD,UAAU,SAASuD,cAAY,SACpC,yBAAKvD,UAAU,SAASuD,cAAY,QACpC,yBAAKvD,UAAU,SAASuD,cAAY,YACpC,yBAAKvD,UAAU,SAASuD,cAAY,UACpC,yBAAKvD,UAAU,SAASuD,cAAY,WACpC,yBAAKvD,UAAU,SAASuD,cAAY,WACpC,yBAAKvD,UAAU,SAASuD,cAAY,SACpC,yBAAKvD,UAAU,SAASuD,cAAY,cACpC,yBAAKvD,UAAU,SAASuD,cAAY,WACpC,yBAAKvD,UAAU,SAASuD,cAAY,mBACpC,yBAAKvD,UAAU,SAASuD,cAAY,eACpC,yBAAKvD,UAAU,SAASuD,cAAY,iBCLrCC,EAVK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnB,OACI,yBAAKrD,MAAO,CAAEsD,gBAAiBD,GAAazD,UAAU,kBAClD,yBAAKI,MAAO,CAAEsD,gBAAiBD,GAAazD,UAAU,gBACtD,yBAAKI,MAAO,CAAEsD,gBAAiBD,GAAazD,UAAU,mBCQnD2D,EAZE,SAAC,GAAiC,IAA/BxB,EAA8B,EAA9BA,GAAIjB,EAA0B,EAA1BA,aAAcU,EAAY,EAAZA,MAClC,OACI,2BACI5B,UAAU,wBACVmC,GAAIA,EACJzB,SAAUQ,EACVU,MAAOA,EACPgC,YAAY,qBCsHTC,E,kDAzHX,WAAYjD,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTiD,iBAAiB,EACjBC,gBAAiB,EAAKnD,MAAMmD,gBAC5BC,gBAAiB,EAAKpD,MAAMoD,gBAC5BC,cAAe,EAAKrD,MAAMqD,cAC1BC,cAAe,EAAKtD,MAAMsD,eAG9B,EAAK5C,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKkC,aAAe,EAAKA,aAAalC,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKgD,eAAiB,EAAKA,eAAehD,KAApB,gBAdP,E,yDAkBNM,EAAG2C,GACZ,IAAIvC,EAAQJ,EAAEE,OAAOC,MAErBL,KAAKC,SAAL,eACK4C,EAAWvC,M,mCAKhBN,KAAKC,SAAS,CACVsC,iBAAiB,M,mCAKZrC,EAAG4C,GACZ,IAAIC,EAAe7C,EAAEE,OAAO4C,QAAQC,YAEfC,IAAjBH,GAGA/C,KAAKC,SAAL,eACK6C,EAAaC,M,qCAKX7C,GACXA,EAAEM,iBAEFR,KAAKX,MAAMuD,eAAX,eAA+B5C,KAAKV,QAEpCU,KAAKC,SAAS,CACVsC,iBAAiB,M,+BAIf,IAAD,SACuFvC,KAAKV,MAAzFiD,EADH,EACGA,gBAAiBC,EADpB,EACoBA,gBAAiBC,EADrC,EACqCA,gBAAiBC,EADtD,EACsDA,cAAeC,EADrE,EACqEA,cAC1E,OACI,yBAAKlE,UAAU,iBACX,0BAAMkC,SAAUX,KAAK4C,gBACjB,yBAAKnE,UAAU,mBACX,2BACIA,UAAU,sCACV0E,QAAQ,iBAFZ,cAIA,2BACI1E,UAAU,sCACV0E,QAAQ,iBAFZ,cAIA,wBAAI1E,UAAU,gBAAgBiE,GAC9B,wBAAIjE,UAAU,gBAAgBkE,GAC7BJ,EACG,oCACI,kBAAC,EAAD,CACI3B,GAAG,gBACHjB,aAAc,SAAAO,GAAC,OAAI,EAAKP,aAAaO,EAAG,kBACxCG,MAAOqC,IAEX,kBAAC,EAAD,CACI9B,GAAG,gBACHjB,aAAc,SAAAO,GAAC,OAAI,EAAKP,aAAaO,EAAG,kBACxCG,MAAOsC,KAIf,MAGR,yBAAKlE,UAAU,kBACX,2BAAOA,UAAU,sCAAjB,eACA,2BAAOA,UAAU,sCAAjB,eACC8D,EACG,oCACI,kBAAC,EAAD,CAAYT,aAAc,SAAA5B,GAAC,OAAI,EAAK4B,aAAa5B,EAAG,sBACpD,kBAAC,EAAD,CAAY4B,aAAc,SAAA5B,GAAC,OAAI,EAAK4B,aAAa5B,EAAG,uBAGxD,KAEJ,kBAAC,EAAD,CAAagC,UAAWM,IACxB,kBAAC,EAAD,CAAaN,UAAWO,KAE3BF,EACG,4BACI9D,UAAU,iBACVI,MAAO,CAAEuE,QAASb,EAAkB,QAAU,SAFlD,QAKA,MAGR,4BACI1B,QAASb,KAAKD,WACdtB,UAAU,eACVI,MAAO,CAAEuE,QAASb,EAAkB,OAAS,UAHjD,a,GAhHOzB,aCkBRM,eAfS,SAAA9B,GACpB,MAAO,CACHoD,cAAepD,EAAMoD,cACrBC,cAAerD,EAAMqD,cACrBH,gBAAiBlD,EAAMkD,gBACvBC,gBAAiBnD,EAAMmD,oBAIJ,SAAApB,GACvB,MAAO,CACHuB,eAAgB,SAACpB,GAAD,OAAUH,ELsBF,SAACG,GAC7B,MAAO,CACHzC,KAAM,oBACNsE,SAAU7B,GKzByB8B,CAAiB9B,QAI7CJ,CAA6CkB,GCmH7CiB,E,kDAlIX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAGDC,MAAQ,CACTC,YAAa,GACbE,cAAe,MAGnB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKhB,YAAc,EAAKA,YAAYgB,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAK4D,YAAc,EAAKA,YAAY5D,KAAjB,gBAZJ,E,gEAiBfI,KAAKX,MAAMoE,e,mCAIFvD,GACT,IAAII,EAAQJ,EAAEE,OAAOC,MAErBL,KAAKC,SAAS,CACVV,YAAae,M,kCAKTJ,GACR,IAAIC,EAAMD,EAAEE,OAAOC,MAEnBL,KAAKC,SAAS,CACVR,cAAeU,M,mCAKVD,GACTA,EAAEM,iBAEF,IAAIjB,EAAcS,KAAKV,MAAMC,YACzBE,EAAgBO,KAAKV,MAAMG,cAE/BO,KAAKX,MAAMQ,aAAaN,EAAaE,GAGrCO,KAAKC,SAAS,CACVV,YAAa,O,kCAKTW,GACRA,EAAEM,iBAEFR,KAAKX,MAAMqE,Y,+BAGL,IAAD,SAE6E1D,KAAKX,MAAjFsE,EAFD,EAECA,QAASjB,EAFV,EAEUA,cAAeC,EAFzB,EAEyBA,cAAeH,EAFxC,EAEwCA,gBAAiBC,EAFzD,EAEyDA,gBAFzD,EAGkCzC,KAAKV,MAApCC,EAHH,EAGGA,YAAaE,EAHhB,EAGgBA,cAGjBmE,EAAiBrE,EAAYsE,OAAS,GAAuB,OAAlBpE,EAG3CqE,EAA6BH,EAAQE,OAAS,EAElD,OACI,yBAAKpF,UAAU,oBACX,kBAAC,EAAD,uBACA,wBAAIA,UAAU,eAAd,wDAEA,0BAAMA,UAAU,cAAckC,SAAUX,KAAKH,cACzC,2BAAOpB,UAAU,QAAQ0E,QAAQ,eAAjC,iBACA,2BAAO1E,UAAU,qBAAqBmC,GAAG,cAAczB,SAAUa,KAAKL,aAAcU,MAAOd,EAAa8C,YAAY,wBACpH,uBAAG5D,UAAU,SAAb,kBAEA,kBAAC,EAAD,CAAcG,YAAa,SAACsB,GAAD,OAAO,EAAKtB,YAAYsB,IAAIvB,WAAW,UAClE,4BAAQF,UAAU,MAAMI,MAAO,CAAEkF,WAAYH,EAAS,SAAW,YAAjE,QAGHA,EAAS,uBAAGnF,UAAU,aAAb,0DAAsF,KAChG,0BAAMA,UAAU,QAEXkF,EAAQE,OACL,yBAAKpF,UAAU,mBACX,yBAAKA,UAAU,aACX,4BAAQoC,QAASb,KAAKwD,YAAa/E,UAAU,eAA7C,iBACA,kBAAC,IAAD,CAAMuF,GAAG,eACL,4BACIvF,UAAU,MACVI,MAAO,CAAEkF,WAAYD,EAAsB,SAAW,WACtD/E,KAAK,UAHT,oBAQP4E,EAAQM,KAAI,SAAAzE,GAAM,OACf,yBAAKf,UAAU,UAAUyF,IAAK1E,EAAOoB,IACjC,kBAAC,EAAD,CAAQpB,OAAQA,SAK5B,uBAAGf,UAAU,iBAAb,oEAEJ,yBAAKA,UAAU,yBACX,kBAAC,EAAD,CACI0F,YAAazB,EACb0B,YAAazB,EACb0B,cAAe7B,EACf8B,cAAe7B,IAEnB,kBAAC,IAAD,CAAMuB,GAAG,kBACL,4BACIvF,UAAU,yBACVM,KAAK,UAFT,4B,GAvHN+B,aCePM,eAdS,SAAA9B,GACpB,MAAO,CACHqE,QAASrE,EAAMqE,YAII,SAAAtC,GACvB,MAAO,CACHoC,WAAY,kBAAMpC,GRDM,SAAAA,GAC5BN,EAAMwD,IAAI,YAAYhD,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAE1BH,EClBkB,SAACsC,GACvB,MAAO,CACH5E,KAAM,cACN4E,QAASA,GDeAa,CADOhD,WQAhB3B,aAAc,SAACN,EAAaE,GAAd,OAAgC4B,ERM5B,SAAC9B,EAAaE,GAAd,OAAgC,SAAA4B,GACtDN,EAAM0D,KAAK,WAAY,CACnBlF,YAAaA,EACbE,cAAeA,IAChB8B,MAAK,YAAe,IACb/B,EADY,EAAXgC,KACaA,KACpBH,ECtBiB,SAAC7B,GACtB,MAAO,CACHT,KAAM,aACNS,OAAQA,GDmBCkF,CAAUlF,QQZoCmF,CAAWpF,EAAaE,KAC/EiE,QAAS,kBAAMrC,GRkCY,SAAAA,GAC/BN,EAAMY,OAAO,YAAYJ,MAAK,WAC1BF,ECzBG,CACHtC,KAAM,4BORCqC,CAA6CmC,GCH7CqB,EAhBG,SAAC,GAAkD,IAAhD/B,EAA+C,EAA/CA,SAAUgC,EAAqC,EAArCA,cAAe3C,EAAsB,EAAtBA,UAAW4C,EAAW,EAAXA,KACrD,OACI,yBAAKrG,UAAU,cACX,wBAAIA,UAAU,aAAaoE,GAC3B,kBAAC,EAAD,CAAaX,UAAWA,IACxB,uBAAGzD,UAAU,eAAb,mBAA4CoG,EAA5C,OACA,yBAAKpG,UAAU,aACVqG,EAAKb,KAAI,SAACzE,EAAQuF,GAAT,OACN,0BAAMtG,UAAU,cAAcyF,IAAKa,GAAIvF,EAAOD,mBCKnD6B,eAVS,SAAA9B,GACpB,MAAO,CACHqE,QAASrE,EAAMqE,QACfQ,YAAa7E,EAAM6E,YACnBC,YAAa9E,EAAM8E,YACnBC,cAAe/E,EAAM+E,cACrBC,cAAehF,EAAMgF,iBAIdlD,CAAyBwD,GC6GzBI,E,kDAvHX,WAAY3F,GAAQ,IAAD,8BACf,cAAMA,IAGDC,MAAQ,CACT2F,eAAgB,GAChBC,eAAgB,GAChBxC,cAAe,EAAKrD,MAAMqD,cAC1BC,cAAe,EAAKtD,MAAMsD,cAC1BwC,OAAO,GAGX,EAAKxF,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbL,E,gEAkBfI,KAAKX,MAAM+F,W,mCAIFlF,EAAGmF,GACZ,IAAI/E,GAASJ,EAAEE,OAAOC,MAEtBL,KAAKC,SAAL,eACKoF,EAAY/E,M,mCAKRJ,GAAI,IAAD,OACZA,EAAEM,iBAEFR,KAAKX,MAAMQ,aAAaG,KAAKV,OAG7BU,KAAKC,SAAS,CACVgF,eAAgB,GAChBC,eAAgB,GAChBxC,cAAe1C,KAAKX,MAAMqD,cAC1BC,cAAe3C,KAAKX,MAAMsD,cAC1BwC,OAAO,IAIXG,YAAW,kBAAM,EAAKrF,SAAS,CAAEkF,OAAO,MAAU,O,+BAG5C,IAAD,SAE6CnF,KAAKV,MAA/C2F,EAFH,EAEGA,eAAgBC,EAFnB,EAEmBA,eAAgBC,EAFnC,EAEmCA,MAFnC,EAK+EnF,KAAKX,MAAjFsE,EALH,EAKGA,QAASjB,EALZ,EAKYA,cAAeC,EAL3B,EAK2BA,cAAeH,EAL1C,EAK0CA,gBAAiBC,EAL3D,EAK2DA,gBAG5D8C,EAAmB5B,EAAQ6B,QAAO,SAAAhG,GAAM,OAAoB,IAAhBA,EAAOsF,QACnDW,EAAmB9B,EAAQ6B,QAAO,SAAAhG,GAAM,OAAoB,IAAhBA,EAAOsF,QAGnDD,EAAgBa,KAAKC,MAAMhC,EAAQiC,QAAO,SAACC,EAAKrG,GAChD,OAAOqG,EAAMrG,EAAOC,gBACrB,GAAKkE,EAAQE,QAEhB,OACI,yBAAKpF,UAAU,oBACX,kBAAC,EAAD,cACC0G,EAAQ,uBAAG1G,UAAU,iBAAb,gBAAgD,KACzD,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CACIyD,UAAWM,EACXsC,KAAMS,EACN1C,SAAUH,EACVmC,cAAeA,IAEnB,0BACIpG,UAAU,aACVkC,SAAUX,KAAKH,cAEf,wBAAIpB,UAAU,aAAd,eACA,wBAAIA,UAAU,cAAciE,GAC5B,2BACIjE,UAAU,oBACVM,KAAK,OACLsD,YAAY,cACZhC,MAAO4E,EACP9F,SAAU,SAAAe,GAAO,EAAKP,aAAaO,EAAG,qBAE1C,wBAAIzB,UAAU,cAAckE,GAC5B,2BACIlE,UAAU,oBACVM,KAAK,OACLsD,YAAY,cACZhC,MAAO6E,EACP/F,SAAU,SAAAe,GAAO,EAAKP,aAAaO,EAAG,qBAE1C,4BAAQzB,UAAU,OAAlB,0BAEJ,kBAAC,EAAD,CACIyD,UAAWO,EACXqC,KAAMW,EACN5C,SAAUF,EACVkC,cAAeA,KAGvB,yBAAKpG,UAAU,cACX,kBAAC,IAAD,CAAMuF,GAAG,KACL,4BAAQvF,UAAU,kCAAkCM,KAAK,UAAzD,wBAEJ,kBAAC,IAAD,CAAMiF,GAAG,kBACL,4BAAQvF,UAAU,cAAcM,KAAK,UAArC,2B,GAhHJ+B,aCqBLM,eAlBS,SAAA9B,GACpB,MAAO,CACHqE,QAASrE,EAAMqE,QACfjB,cAAepD,EAAMoD,cACrBC,cAAerD,EAAMqD,cACrBH,gBAAiBlD,EAAMkD,gBACvBC,gBAAiBnD,EAAMmD,oBAKJ,SAAApB,GACvB,MAAO,CACH+D,OAAQ,kBAAM/D,GZsCW,SAAAA,GAC7BN,EAAMwD,IAAI,kBAAkBhD,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAEhCH,EC5BiB,SAACsC,GACtB,MAAO,CACH5E,KAAM,aACN4E,QAASA,GDyBAmC,CADOtE,WYvChB3B,aAAc,SAACkG,EAAOR,EAAkBE,GAA1B,OAA+CpE,EZuD5C,SAAC0E,GAAD,OAAW,SAAA1E,GAChCN,EAAM0D,KAAK,oBAAqB,CAC5B/B,cAAeqD,EAAMrD,cACrBuC,eAAgBc,EAAMd,eACtBtC,cAAeoD,EAAMpD,cACrBuC,eAAgBa,EAAMb,iBACvB3D,MAAK,YAAe,IACbwE,EADY,EAAXvE,KACYA,KACnBH,EC9ByB,SAAC0E,GAC9B,MAAO,CACHhH,KAAM,YACNgH,MAAOA,GD2BEC,CAAkBD,QY/D2CE,CAAUF,QAIzE3E,CAA6C4D,GCN7CkB,E,kLAfFlG,KAAKX,MAAM8G,QACZnG,KAAKX,MAAM+G,gB,+BAIT,IAAD,EACwBpG,KAAKX,MAA1Bb,EADH,EACGA,SAGR,OAJK,EACa2H,OAGF3H,EACZ,yBAAKC,UAAU,e,GAbLqC,aCgBPM,eAZS,SAAA9B,GACpB,MAAO,CACH6G,OAAQ7G,EAAM6G,WAIK,SAAA9E,GACvB,MAAO,CACH+E,YAAa,kBAAM/E,GduDa,SAAAA,GACpCN,EAAMwD,IAAI,qBAAqBhD,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAEnCH,ECxBmB,SAACgF,GACxB,MAAO,CACHtH,KAAM,eACNsH,QAASA,GDqBAC,CADO9E,ccrDTJ,CAA6C8E,GC4D7CK,E,kDAzEX,WAAYlH,GAAQ,IAAD,8BACf,cAAMA,IAEDmH,mBAAqB,EAAKA,mBAAmB5G,KAAxB,gBAHX,E,+DAMAM,GACfA,EAAEM,iBAEFR,KAAKX,MAAMoH,iB,+BAGL,IACEJ,EAAYrG,KAAKX,MAAjBgH,QAER,OACI,yBAAK5H,UAAU,oBACX,kBAAC,EAAD,yBAEE4H,EAAQxC,OAWN,oCACI,2BAAOpF,UAAU,iBACb,2BAAOA,UAAU,cACb,wBAAIA,UAAU,aACV,oCACA,wCACA,qCACA,wCACA,wCAGR,+BACK4H,EAAQpC,KAAI,SAAC8B,EAAOhB,GAAR,OACT,wBAAIb,IAAKa,EAAGtG,UAAU,aAClB,4BAAKsH,EAAMnF,IACX,4BAAKmF,EAAMrD,eACX,4BACKqD,EAAMd,eADX,MAC8Bc,EAAMb,gBAEpC,4BAAKa,EAAMpD,eACX,4BAAKoD,EAAMd,eAAiBc,EAAMb,eAAiBa,EAAMrD,cAAgBqD,EAAMpD,qBAK/F,4BACI9B,QAASb,KAAKwG,mBACd/H,UAAU,iCAFd,0BAKA,kBAAC,IAAD,CAAMuF,GAAG,KACL,4BACIvF,UAAU,iBACVM,KAAK,UAFT,UAzCR,oCACI,wBAAIN,UAAU,iBAAd,sBACA,kBAAC,IAAD,CAAMuF,GAAG,KACL,4BACIvF,UAAU,iBACVM,KAAK,UAFT,e,GAxBN+B,aCgBPM,eAZS,SAAA9B,GACpB,MAAO,CACH+G,QAAS/G,EAAM+G,YAII,SAAAhF,GACvB,MAAO,CACHoF,aAAc,kBAAMpF,GhB0EO,SAAAA,GAC/BN,EAAMY,OAAO,qBAAqBJ,MAAK,WACnCF,EC7BG,CACHtC,KAAM,4Be5CCqC,CAA6CmF,G,OCG7CG,EAZH,kBACV,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxD,IACjC,kBAAC,IAAD,CAAOuD,KAAK,cAAcC,UAAW/B,IACrC,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,iBAAiBC,UAAWR,Q,gBCPjCS,EAVC,CACZrD,QAAS,GACTjB,cAAe,WACfC,cAAe,WACfH,gBAAiB,OACjBC,gBAAiB,UACjB4D,QAAS,GACTF,QAAQ,GCsGGc,EAhBC,SAAC3H,EAAO4H,GACpB,OAAQA,EAAOnI,MACX,IAAK,cAAe,OA5FT,SAACO,EAAD,GAAyB,IAAfqE,EAAc,EAAdA,QACzB,OAAO,2BACArE,GADP,IAEIqE,QAASA,IAyFkBa,CAAWlF,EAAO4H,GAC7C,IAAK,aAAc,OArFT,SAAC5H,EAAD,GAAwB,IAAdE,EAAa,EAAbA,OACxB,OAAO,2BACAF,GADP,IAEIqE,QAAQ,GAAD,mBAAMrE,EAAMqE,SAAZ,CAAqBnE,MAkFFkF,CAAUpF,EAAO4H,GAC3C,IAAK,cAAe,OA9ET,SAAC5H,EAAD,GAAwB,IAAdE,EAAa,EAAbA,OAIrB2H,EAFO7H,EAAMqE,QAESM,KAAI,SAAAmD,GAC1B,OAAIA,EAASxG,KAAOpB,EAAOoB,GAChBpB,EAEA4H,KAKf,OAAO,2BACA9H,GADP,IAEIqE,QAASwD,IA+DkB1F,CAAWnC,EAAO4H,GAC7C,IAAK,gBAAiB,OA3DT,SAAC5H,EAAD,GAAoB,IAAVsB,EAAS,EAATA,GAC3B,OAAO,2BACAtB,GADP,IAEIqE,QAASrE,EAAMqE,QAAQ6B,QAAO,SAAAhG,GAAM,OAAIA,EAAOoB,KAAOA,OAwDzBgB,CAAatC,EAAO4H,GACjD,IAAK,gBAAiB,OAAOF,EAC7B,IAAK,aAAc,OArDT,SAAC1H,EAAD,GAAyB,IAAfqE,EAAc,EAAdA,QACxB,OAAO,2BACArE,GADP,IAEIqE,QAASA,IAkDiBmC,CAAUxG,EAAO4H,GAC3C,IAAK,oBAAqB,OA5Cd,SAAC5H,EAAD,GAA0B,IAAhB+D,EAAe,EAAfA,SAC1B,OAAO,2BACA/D,GADP,IAEIoD,cAAeW,EAASX,cACxBC,cAAeU,EAASV,cACxBH,gBAAiBa,EAASb,gBAC1BC,gBAAiBY,EAASZ,kBAsCO4E,CAAY/H,EAAO4H,GACpD,IAAK,eAAgB,OAhCT,SAAC5H,EAAD,GAAyB,IAAf+G,EAAc,EAAdA,QAC1B,OAAO,2BACA/G,GADP,IAEI+G,QAASA,EACTF,QAAQ,IA4BoBG,CAAYhH,EAAO4H,GAC/C,IAAK,YAAa,OAzBA,SAAC5H,EAAD,GAAuB,IAAbyG,EAAY,EAAZA,MAChC,OAAO,2BACAzG,GADP,IAEI+G,QAAQ,GAAD,mBAAM/G,EAAM+G,SAAZ,CAAqBN,MAsBHC,CAAkB1G,EAAO4H,GAClD,IAAK,gBAAiB,OAlBT,SAAC5H,GAClB,OAAO,2BACAA,GADP,IAEI+G,QAAS,KAeoBiB,CAAahI,GAC1C,QAAS,OAAOA,I,gBCpGlBiI,EAAmBC,OAAOC,sCAAwCC,IAQzDC,EANDC,YACVX,EACAD,EACAO,EAAiBM,YAAgBC,OCDrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.26b402f8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ children }) => (\n    <header className=\"header\">\n        <h1>\n            {children}\n        </h1>\n    </header>\n);\n\nexport default Header;","import React from 'react';\n\nconst PlayerRating = ({ fontColour, handleRange }) => {\n    return (\n        <div className=\"player-rating-group\">\n            <div className=\"player-rating-numbers\" style={{ color: fontColour }}>\n                <span className=\"player-rating-number\">1</span>\n                <span className=\"player-rating-number\">2</span>\n                <span className=\"player-rating-number\">3</span>\n                <span className=\"player-rating-number\">4</span>\n                <span className=\"player-rating-number\">5</span>\n                <span className=\"player-rating-number\">6</span>\n                <span className=\"player-rating-number\">7</span>\n                <span className=\"player-rating-number\">8</span>\n                <span className=\"player-rating-number\">9</span>\n                <span className=\"player-rating-number\">10</span>\n            </div>\n            <input\n                className=\"rating-range\"\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                step=\"1\"\n                onChange={handleRange}\n            />\n        </div>\n    );\n};\n\nexport default PlayerRating;","import React, { Component } from \"react\";\nimport PlayerRating from \"../../components/PlayerRating\";\n\nclass Player extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            player_name: this.props.player.player_name,\n            player_rating: this.props.player.player_rating,\n            editing: false,\n        }\n\n        // player name and rating is set to their pre-defined values that are on the player property. Editing is intially false so edit box isn't rendered at the start\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleRange = this.handleRange.bind(this);\n    }\n\n    // determines whether the edit section for individual player is shown\n    handleEdit() {\n        this.setState({\n            editing: true,\n        });\n    }\n\n    // sets the value of player_rating in state to the value of the range chosen for player's rating\n    handleRange(e) {\n        let num = e.target.value;\n\n        this.setState({\n            player_rating: num,\n        });\n    }\n\n    // sets the player_name state property to match the name input field\n    handleChange(e) {\n        let input = e.target.value;\n\n        this.setState({\n            player_name: input\n        });\n    }\n\n    // allows the player to be deleted from the database\n    handleDelete(e) {\n        this.props.onDelete();\n    }\n\n    // takes the player information, which has either been updated or is still set to its initial value and submits it to the database\n    handleSubmit(e) {\n        e.preventDefault();\n\n        let player_name = this.state.player_name;\n        let player_rating = this.state.player_rating\n\n        this.setState({\n            editing: false\n        });\n\n        this.props.onUpdate(player_name, player_rating);\n    }\n\n    render() {\n        // destructuring the state and props objects\n        const { player } = this.props;\n        const { editing, player_name } = this.state;\n\n        let rating = player.player_rating;\n\n        return (\n            <>\n                {/* if 'editing' is set to true, this form is rendered with options to update player's name and rating */}\n                {editing ?\n                    <form\n                        className=\"update-player-form\"\n                        onSubmit={this.handleSubmit}\n                    >\n                        <input\n                            className=\"input\"\n                            id=\"player\"\n                            onChange={this.handleChange}\n                            value={player_name}\n                        />\n                        <PlayerRating\n                            handleRange={(e) => this.handleRange(e)}\n                            fontColour=\"black\"\n                        />\n                        <button className=\"btn update-player-btn\">Update</button>\n                    </form>\n                    :\n                    // the name renders as a p element if there if 'editing' in state is false\n                    <p className=\"player\">{player.player_name}</p>}\n                {/* This section appears regardless of editing state to allow for editing and deletion*/}\n                <div className=\"player-options\">\n                    <p className=\"player-rating\">{rating}</p>\n                    <button className=\"btn btn-blue\" onClick={this.handleEdit}>Edit</button>\n                    <button className=\"btn btn-red\" onClick={this.handleDelete}>Delete</button>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Player;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"https://afternoon-gorge-82119.herokuapp.com/api\",\n    // use baseURL: \"http://homestead.test/api\" if running locally\n    headers: {\n        Accept: \"application/json\",\n    },\n});","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the Player component\nimport Player from \"./Player\";\n\nimport { patchPlayer, deletePlayer } from \"../../data/actions/api\";\n\nconst mapDispatchToProps = (dispatch, { player }) => {\n    return {\n        onUpdate: (player_name, player_rating) => dispatch(patchPlayer(player.id, player_name, player_rating)),\n        onDelete: () => dispatch(deletePlayer(player.id)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Player);","import axios from \"../axios\";\n\nimport {\n    setPlayers,\n    addPlayer,\n    resetPlayers,\n    editPlayer,\n    removePlayer,\n    makeTeams,\n    resetHistory,\n    saveHistory,\n    addMatchToHistory\n} from \"./state\";\n\n// gets the list of players from the database, returns an array of objects to be used in the state action\nexport const getPlayers = () => dispatch => {\n    axios.get(\"/players\").then(({ data }) => {\n        const players = data;\n        dispatch(setPlayers(players));\n    });\n};\n\n// creates a player with the name and rating the user entered, returns the new player object to be used in the state action\nexport const postPlayer = (player_name, player_rating) => dispatch => {\n    axios.post(\"/players\", {\n        player_name: player_name,\n        player_rating: player_rating\n    }).then(({ data }) => {\n        const player = data.data;\n        dispatch(addPlayer(player));\n    });\n};\n\n// updates the object with the player id with the player rating and/or player name, returns the new player object to be used in the state action\nexport const patchPlayer = (id, player_name, player_rating) => dispatch => {\n    axios.patch(`/players/${id}`, {\n        player_name: player_name,\n        player_rating: player_rating\n    }).then(({ data }) => {\n        const player = data.data;\n        dispatch(editPlayer(player));\n    });\n};\n\n// deletes the object with the player id from the database and returns nothing, sends the same id to the state\nexport const deletePlayer = (id) => dispatch => {\n    axios.delete(`/players/${id}`).then(() => {\n        dispatch(removePlayer(id));\n    });\n};\n\n// resets the database, returns nothing, calls the resetPlayers state action\nexport const deletePlayers = () => dispatch => {\n    axios.delete(\"/players\").then(() => {\n        dispatch(resetPlayers());\n    });\n};\n\n// triggers the assign teams public function in the database which sets the team value in each player object to either 1 or 2 based on their rating (see the logic in the teams-api). Returns the entire updated players array of objects and passes that to the state action\nexport const assignTeams = () => dispatch => {\n    axios.get(\"/players/teams\").then(({ data }) => {\n        const players = data\n        dispatch(makeTeams(players));\n    });\n};\n\n// Requests to matches table in db\n\n// gets the list of matches from the database, returns an array of objects to be used in the state action\nexport const getPreviousMatches = () => dispatch => {\n    axios.get(\"/previous-matches\").then(({ data }) => {\n        const history = data;\n        dispatch(saveHistory(history));\n    });\n};\n\n// creates a match with the team names and scores the user entered, returns the new player object to be used in the state action\nexport const postMatch = (match) => dispatch => {\n    axios.post(\"/previous-matches\", {\n        team_one_name: match.team_one_name,\n        team_one_score: match.team_one_score,\n        team_two_name: match.team_two_name,\n        team_two_score: match.team_two_score,\n    }).then(({ data }) => {\n        const match = data.data;\n        dispatch(addMatchToHistory(match));\n    });\n};\n\n// resets the database, returns nothing, calls the resetHistory state action\nexport const deleteHistory = () => dispatch => {\n    axios.delete(\"/previous-matches\").then(() => {\n        dispatch(resetHistory());\n    });\n};","export const setPlayers = (players) => {\n    return {\n        type: \"SET_PLAYERS\",\n        players: players,\n    };\n};\n\nexport const addPlayer = (player) => {\n    return {\n        type: \"ADD_PLAYER\",\n        player: player,\n    };\n};\n\nexport const editPlayer = (player) => {\n    return {\n        type: \"EDIT_PLAYER\",\n        player: player,\n    };\n};\n\nexport const removePlayer = (id) => {\n    return {\n        type: \"REMOVE_PLAYER\",\n        id: id\n    };\n};\n\nexport const resetPlayers = () => {\n    return {\n        type: \"RESET_PLAYERS\",\n    };\n};\n\nexport const makeTeams = (players) => {\n    return {\n        type: \"MAKE_TEAMS\",\n        players: players,\n    };\n};\n\nexport const saveTeamSettings = (data) => {\n    return {\n        type: \"SET_TEAM_SETTINGS\",\n        settings: data,\n    };\n};\n\nexport const saveHistory = (history) => {\n    return {\n        type: \"SAVE_HISTORY\",\n        history: history,\n    };\n};\n\nexport const addMatchToHistory = (match) => {\n    return {\n        type: \"ADD_MATCH\",\n        match: match,\n    };\n};\n\nexport const resetHistory = () => {\n    return {\n        type: \"RESET_HISTORY\",\n    };\n};","import React from 'react';\n\nconst ColourGrid = ({ selectColour }) => {\n    return (\n        <>\n            <div class=\"colour-grid\" onClick={selectColour} >\n                <div className=\"colour\" data-colour=\"navy\" />\n                <div className=\"colour\" data-colour=\"red\" />\n                <div className=\"colour\" data-colour=\"darkred\" />\n                <div className=\"colour\" data-colour=\"green\" />\n                <div className=\"colour\" data-colour=\"orange\" />\n                <div className=\"colour\" data-colour=\"purple\" />\n                <div className=\"colour\" data-colour=\"pink\" />\n                <div className=\"colour\" data-colour=\"turquoise\" />\n                <div className=\"colour\" data-colour=\"yellow\" />\n                <div className=\"colour\" data-colour=\"darkolivegreen\" />\n                <div className=\"colour\" data-colour=\"aquamarine\" />\n                <div className=\"colour\" data-colour=\"indianred\" />\n            </div>\n        </>\n    );\n};\n\nexport default ColourGrid;\n","import React from 'react';\n\nconst FootballKit = ({ kitColour }) => {\n    return (\n        <div style={{ backgroundColor: kitColour }} className=\"football-shirt\">\n            <div style={{ backgroundColor: kitColour }} className=\"left-sleeve\" />\n            <div style={{ backgroundColor: kitColour }} className=\"right-sleeve\" />\n        </div>\n\n    );\n};\n\nexport default FootballKit;","import React from 'react';\n\nconst TeamName = ({ id, handleChange, value }) => {\n    return (\n        <input\n            className=\"input team-name-input\"\n            id={id}\n            onChange={handleChange}\n            value={value}\n            placeholder=\"Enter team name\"\n        />\n    );\n};\n\nexport default TeamName;","import React, { Component } from 'react';\nimport ColourGrid from \"./ColourGrid\";\nimport FootballKit from \"./FootballKit\";\nimport TeamName from \"./TeamName\";\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            editingSettings: false,\n            team_one_colour: this.props.team_one_colour,\n            team_two_colour: this.props.team_two_colour,\n            team_one_name: this.props.team_one_name,\n            team_two_name: this.props.team_two_name,\n        }\n\n        this.handleEdit = this.handleEdit.bind(this);\n        this.selectColour = this.selectColour.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.submitSettings = this.submitSettings.bind(this);\n    }\n\n    // sets the value in state to the value of the name input field\n    handleChange(e, teamName) {\n        let input = e.target.value;\n\n        this.setState({\n            [teamName]: input,\n        });\n    }\n\n    handleEdit() {\n        this.setState({\n            editingSettings: true,\n        });\n    }\n\n    // assigns chosen shirt colour to whichever team the user has picked a colour for\n    selectColour(e, teamColour) {\n        let chosenColour = e.target.dataset.colour;\n\n        if (chosenColour === undefined) {\n            return\n        } else {\n            this.setState({\n                [teamColour]: chosenColour\n            })\n        }\n    }\n\n    submitSettings(e) {\n        e.preventDefault()\n\n        this.props.submitSettings({ ...this.state })\n\n        this.setState({\n            editingSettings: false\n        })\n    }\n\n    render() {\n        const { editingSettings, team_one_colour, team_two_colour, team_one_name, team_two_name } = this.state;\n        return (\n            <div className=\"settings-form\">\n                <form onSubmit={this.submitSettings}>\n                    <div className=\"names-container\">\n                        <label\n                            className=\"settings-label settings-label-names\"\n                            htmlFor=\"team_one_name\">Team Name:\n                        </label>\n                        <label\n                            className=\"settings-label settings-label-names\"\n                            htmlFor=\"team_two_name\">Team Name:\n                        </label>\n                        <h2 className=\"team-heading\">{team_one_name}</h2>\n                        <h2 className=\"team-heading\">{team_two_name}</h2>\n                        {editingSettings ?\n                            <>\n                                <TeamName\n                                    id=\"team_one_name\"\n                                    handleChange={e => this.handleChange(e, \"team_one_name\")}\n                                    value={team_one_name}\n                                />\n                                <TeamName\n                                    id=\"team_two_name\"\n                                    handleChange={e => this.handleChange(e, \"team_two_name\")}\n                                    value={team_two_name}\n                                />\n                            </>\n                            :\n                            null\n                        }\n                    </div>\n                    <div className=\"kits-container\">\n                        <label className=\"settings-label settings-label-kits\">Kit colour:</label>\n                        <label className=\"settings-label settings-label-kits\">Kit colour:</label>\n                        {editingSettings ?\n                            <>\n                                <ColourGrid selectColour={e => this.selectColour(e, \"team_one_colour\")} />\n                                <ColourGrid selectColour={e => this.selectColour(e, \"team_two_colour\")} />\n                            </>\n                            :\n                            null\n                        }\n                        <FootballKit kitColour={team_one_colour} />\n                        <FootballKit kitColour={team_two_colour} />\n                    </div>\n                    {editingSettings ?\n                        <button\n                            className=\"btn btn-center\"\n                            style={{ display: editingSettings ? \"block\" : \"none\" }}>Save\n                        </button>\n                        :\n                        null\n                    }\n                </form>\n                <button\n                    onClick={this.handleEdit}\n                    className=\"btn btn-blue\"\n                    style={{ display: editingSettings ? \"none\" : \"block\" }}>Edit\n                </button>\n            </div >\n        );\n    }\n}\n\nexport default Settings;\n\n\n","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the Settings component\nimport Settings from \"./Settings\";\n\nimport { saveTeamSettings } from \"../../data/actions/state\"\n\nconst mapStateToProps = state => {\n    return {\n        team_one_name: state.team_one_name,\n        team_two_name: state.team_two_name,\n        team_one_colour: state.team_one_colour,\n        team_two_colour: state.team_two_colour,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        submitSettings: (data) => dispatch(saveTeamSettings(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Player from \"../Player\";\nimport PlayerRating from \"../PlayerRating\";\nimport Settings from \"../Settings\";\n\nclass Players extends Component {\n    constructor(props) {\n        super(props);\n\n        // state is intialised with an empty string for player's name and a default player rating of 10\n        this.state = {\n            player_name: \"\",\n            player_rating: \"10\",\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleRange = this.handleRange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n    }\n\n    // using the lifecycle method that occurs when the page loads to call the handleLoad property, which gets the players from the database\n    componentDidMount() {\n        this.props.handleLoad();\n    }\n\n    // sets the value in state to the value of the name input field\n    handleChange(e) {\n        let input = e.target.value;\n\n        this.setState({\n            player_name: input,\n        });\n    }\n\n    // sets the player_rating property in state to the range value chosen for player's rating\n    handleRange(e) {\n        let num = e.target.value;\n\n        this.setState({\n            player_rating: num,\n        });\n    }\n\n    // submits the form with the data filled in by the user\n    handleSubmit(e) {\n        e.preventDefault();\n\n        let player_name = this.state.player_name;\n        let player_rating = this.state.player_rating;\n\n        this.props.handleSubmit(player_name, player_rating);\n\n        // resets the player_name state property so the user can add more players easily\n        this.setState({\n            player_name: \"\",\n        });\n    }\n\n    // allows the user to delete the database to start fresh\n    handleClear(e) {\n        e.preventDefault();\n\n        this.props.onClear();\n    }\n\n    render() {\n        // destructuring the state and props objects\n        let { players, team_one_name, team_two_name, team_one_colour, team_two_colour } = this.props;\n        const { player_name, player_rating } = this.state;\n\n        // only show add button when player has name and rating\n        let hidden = true ? (player_name.length < 1 || player_rating === null) : false;\n\n        // only show generate players button when user has entered at least 4 players\n        let generateBtnDisabled = true ? players.length < 4 : false;\n\n        return (\n            <div className=\"background-image\">\n                <Header>Team Generator</Header>\n                <h3 className=\"sub-heading\">Enter at least 4 names to generate two random teams.</h3>\n                {/* the form which allows users to submit new players, this is always rendered */}\n                <form className=\"player-form\" onSubmit={this.handleSubmit}>\n                    <label className=\"label\" htmlFor=\"player_name\">Add a player:</label>\n                    <input className=\"input player-input\" id=\"player_name\" onChange={this.handleChange} value={player_name} placeholder=\"Enter player's name\"></input>\n                    <p className=\"label\">Player rating:</p>\n                    {/* this component contains the player rating range */}\n                    <PlayerRating handleRange={(e) => this.handleRange(e)} fontColour=\"white\" />\n                    <button className=\"btn\" style={{ visibility: hidden ? \"hidden\" : \"visible\" }}>Add</button>\n                    {/* this error message appears when the form data is invalid */}\n                </form>\n                {hidden ? <p className=\"alert-box\">Please enter a player name and select a player rating.</p> : null}\n                <main className=\"main\">\n                    { /* this checks there are players to show and renders either the players, or text which prompts the user to add players */}\n                    {players.length ?\n                        <div className=\"players-wrapper\">\n                            <div className=\"btn-group\">\n                                <button onClick={this.handleClear} className=\"btn btn-red\">Clear players</button>\n                                <Link to=\"/team-sheet\">\n                                    <button\n                                        className=\"btn\"\n                                        style={{ visibility: generateBtnDisabled ? \"hidden\" : \"visible\" }}\n                                        type=\"button\">Generate teams\n                                    </button>\n                                </Link>\n                            </div>\n                            { /* this map iterates over each player and display a div with a player component for each one */}\n                            {players.map(player => (\n                                <div className=\"players\" key={player.id}>\n                                    <Player player={player} />\n                                </div>\n                            ))}\n                        </div>\n                        :\n                        <p className=\"error-message\">There are no players, add some above to get creating your teams!</p>\n                    }\n                    <div className=\"settings-and-prev-btn\">\n                        <Settings\n                            teamOneName={team_one_name}\n                            teamTwoName={team_two_name}\n                            teamOneColour={team_one_colour}\n                            teamTwoColour={team_two_colour}\n                        />\n                        <Link to=\"/match-history\">\n                            <button\n                                className=\"btn btn-nav btn-footer\"\n                                type=\"button\">Previous matches\n                            </button>\n                        </Link>\n                    </div>\n                </main>\n            </div>\n        )\n    }\n};\n\nexport default Players;","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the Players component\nimport Players from \"./Players\";\n\nimport { getPlayers, postPlayer, deletePlayers } from \"../../data/actions/api\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleLoad: () => dispatch(getPlayers()),\n        handleSubmit: (player_name, player_rating) => dispatch(postPlayer(player_name, player_rating)),\n        onClear: () => dispatch(deletePlayers()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Players);","import React from 'react';\nimport FootballKit from \"../Settings/FootballKit\";\n\nconst TeamGroup = ({ teamName, averageRating, kitColour, team }) => {\n    return (\n        <div className=\"team-group\">\n            <h2 className=\"team-name\">{teamName}</h2>\n            <FootballKit kitColour={kitColour} />\n            <p className=\"team-rating\">Average rating: {averageRating}/10</p>\n            <div className=\"team-list\" >\n                {team.map((player, i) => (\n                    <span className=\"team-player\" key={i}>{player.player_name}</span>\n                ))}\n            </div>\n        </div>\n\n    );\n};\n\nexport default TeamGroup;","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the TeamGroup component\nimport TeamGroup from \"./TeamGroup\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n        teamOneName: state.teamOneName,\n        teamTwoName: state.teamTwoName,\n        teamOneColour: state.teamOneColour,\n        teamTwoColour: state.teamTwoColour,\n    };\n};\n\nexport default connect(mapStateToProps)(TeamGroup);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport TeamGroup from \"../TeamGroup\";\n\nclass Teams extends Component {\n    constructor(props) {\n        super(props);\n\n        // scores are intialised to empty strings, team names are passed in from the global state, ready to be passed onto match history\n        this.state = {\n            team_one_score: \"\",\n            team_two_score: \"\",\n            team_one_name: this.props.team_one_name,\n            team_two_name: this.props.team_two_name,\n            saved: false\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // using the componentDidMount lifecycle method to call the onLoad property as soon as the page loads, which calls the assignTeams api action\n    componentDidMount() {\n        this.props.onLoad();\n    }\n\n    // whichever score input the user is typing into, the score is being set in the corresponding state property\n    handleChange(e, teamScore) {\n        let input = +e.target.value;\n\n        this.setState({\n            [teamScore]: input,\n        });\n    }\n\n    // submits the final score, team names and the players for each team to the history table in the DB\n    handleSubmit(e) {\n        e.preventDefault();\n\n        this.props.handleSubmit(this.state)\n\n        // resets score form after user submits final score\n        this.setState({\n            team_one_score: \"\",\n            team_two_score: \"\",\n            team_one_name: this.props.team_one_name,\n            team_two_name: this.props.team_two_name,\n            saved: true\n        })\n\n        // hide the saved message after 2 seconds\n        setTimeout(() => this.setState({ saved: false }), 2000);\n    }\n\n    render() {\n        // destructuring local state\n        const { team_one_score, team_two_score, saved } = this.state;\n\n        // destructuring the props object\n        const { players, team_one_name, team_two_name, team_one_colour, team_two_colour } = this.props;\n\n        // creates the two teams based on the team assignment (either 1 or 2) which happened on the backend\n        let team_one_players = players.filter(player => player.team === 1);\n        let team_two_players = players.filter(player => player.team === 2);\n\n        // finds out the average team rating based on each player's rating\n        let averageRating = Math.round(players.reduce((acc, player) => {\n            return acc + player.player_rating;\n        }, 0) / players.length);\n\n        return (\n            <div className=\"background-image\">\n                <Header>Teams</Header>\n                {saved ? <p className=\"alert-message\">Match saved!</p> : null}\n                <div className=\"teams-wrapper\">\n                    <TeamGroup\n                        kitColour={team_one_colour}\n                        team={team_one_players}\n                        teamName={team_one_name}\n                        averageRating={averageRating}\n                    />\n                    <form\n                        className=\"score-form\"\n                        onSubmit={this.handleSubmit}\n                    >\n                        <h2 className=\"team-name\">Final Score</h2>\n                        <h3 className=\"score-team\">{team_one_name}</h3>\n                        <input\n                            className=\"input score-input\"\n                            type=\"text\"\n                            placeholder=\"Enter score\"\n                            value={team_one_score}\n                            onChange={e => { this.handleChange(e, \"team_one_score\") }}\n                        />\n                        <h3 className=\"score-team\">{team_two_name}</h3>\n                        <input\n                            className=\"input score-input\"\n                            type=\"text\"\n                            placeholder=\"Enter score\"\n                            value={team_two_score}\n                            onChange={e => { this.handleChange(e, \"team_two_score\") }}\n                        />\n                        <button className=\"btn\">Save match to history</button>\n                    </form>\n                    <TeamGroup\n                        kitColour={team_two_colour}\n                        team={team_two_players}\n                        teamName={team_two_name}\n                        averageRating={averageRating}\n                    />\n                </div>\n                <div className=\"footer-nav\">\n                    <Link to=\"/\">\n                        <button className=\"btn btn-blue btn-change-players\" type=\"button\">Change your players</button>\n                    </Link>\n                    <Link to=\"/match-history\">\n                        <button className=\"btn btn-nav\" type=\"button\">Previous matches</button>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Teams;","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the Teams component\nimport Teams from \"./Teams\"\n\nimport { assignTeams, postMatch } from \"../../data/actions/api\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n        team_one_name: state.team_one_name,\n        team_two_name: state.team_two_name,\n        team_one_colour: state.team_one_colour,\n        team_two_colour: state.team_two_colour,\n    };\n};\n\n// this onLoad function means that when the user hard refreshes the /team-sheet page the data will still be passed through to render, without this a 404 error occurs on the hosted version.\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLoad: () => dispatch(assignTeams()),\n        handleSubmit: (match, team_one_players, team_two_players) => dispatch(postMatch(match, team_one_players, team_two_players)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Teams);","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n\n    componentDidMount() {\n        if (!this.props.loaded) {\n            this.props.handleMount()\n        }\n    }\n\n    render() {\n        const { children, loaded } = this.props;\n\n        // If the loaded property in global state is set to true, the History component will be shown, otherwise there will just be a loading symbol while the API request is being made\n        return loaded ? children : (\n            <div className=\"loader\"></div>\n        );\n    }\n}\n\nexport default Loading;","import { connect } from \"react-redux\";\n\nimport { getPreviousMatches } from \"../../data/actions/api\";\n\nimport Loading from \"./Loading\";\n\nconst mapStateToProps = state => {\n    return {\n        loaded: state.loaded\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleMount: () => dispatch(getPreviousMatches())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);","import React, { Component } from \"react\";\nimport Header from '../../components/Header';\nimport { Link } from \"react-router-dom\";\n\nclass History extends Component {\n    constructor(props) {\n        super(props)\n\n        this.handleClearHistory = this.handleClearHistory.bind(this);\n    }\n\n    handleClearHistory(e) {\n        e.preventDefault()\n\n        this.props.clearHistory()\n    }\n\n    render() {\n        const { history } = this.props\n\n        return (\n            <div className=\"background-image\">\n                <Header>Previous Matches</Header>\n                {/* if there is nothing in the matches table in the db, error message will show, otherwise the table will show */}\n                {!history.length ?\n                    <>\n                        <h2 className=\"alert-message\">No matches played!</h2>\n                        <Link to=\"/\">\n                            <button\n                                className=\"btn btn-footer\"\n                                type=\"button\">Home\n                    </button>\n                        </Link>\n                    </>\n                    :\n                    <>\n                        <table className=\"history-table\">\n                            <thead className=\"table-head\">\n                                <tr className=\"table-row\">\n                                    <th>Game</th>\n                                    <th>Team One</th>\n                                    <th>Score</th>\n                                    <th>Team Two</th>\n                                    <th>Winner</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {history.map((match, i) => (\n                                    <tr key={i} className=\"table-row\">\n                                        <td>{match.id}</td>\n                                        <td>{match.team_one_name}</td>\n                                        <td>\n                                            {match.team_one_score} - {match.team_two_score}\n                                        </td>\n                                        <td>{match.team_two_name}</td>\n                                        <td>{match.team_one_score > match.team_two_score ? match.team_one_name : match.team_two_name}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                        <button\n                            onClick={this.handleClearHistory}\n                            className=\"btn btn-red clear-history-btn\"\n                        >Clear previous matches\n                </button>\n                        <Link to=\"/\">\n                            <button\n                                className=\"btn btn-footer\"\n                                type=\"button\">Home\n                    </button>\n                        </Link>\n                    </>\n                }\n            </div>\n        )\n    }\n}\n\nexport default History;","// react redux's connect function\nimport { connect } from \"react-redux\";\n\n// import in the History component\nimport History from \"./History\";\n\nimport { deleteHistory } from \"../../data/actions/api\";\n\nconst mapStateToProps = state => {\n    return {\n        history: state.history\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearHistory: () => dispatch(deleteHistory()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(History);","import React from \"react\";\nimport Players from \"./components/Players\";\nimport Teams from \"./components/Teams\";\nimport Loading from \"./components/Loading\";\nimport History from \"./components/History\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nconst App = () => (\n  <Router basename=\"/\">\n    <React.Fragment>\n      <Route exact path=\"/\" component={Players} />\n      <Route path=\"/team-sheet\" component={Teams} />\n      <Loading>\n        <Route path=\"/match-history\" component={History} />\n      </Loading>\n    </React.Fragment>\n  </Router>\n);\n\nexport default App;\n","const initial = {\n    players: [],\n    team_one_name: \"Team One\",\n    team_two_name: \"Team Two\",\n    team_one_colour: \"navy\",\n    team_two_colour: \"darkred\",\n    history: [],\n    loaded: false\n}\n\nexport default initial;","import initial from \"./initial\";\n\n// sets the empty players array defined in initial.js to the players object from the database\nconst setPlayers = (state, { players }) => {\n    return {\n        ...state,\n        players: players\n    };\n};\n\n// adds the new player object passed in from the database into the players array\nconst addPlayer = (state, { player }) => {\n    return {\n        ...state,\n        players: [...state.players, player]\n    };\n};\n\n// returns a new copy of the players array, finds where the id it's been passed in the updated player object matches the existing id in the players array of objects and replaces the entire player object with the new one. If there is no match the object is returned as is.\nconst editPlayer = (state, { player }) => {\n\n    let list = state.players;\n\n    let playersUpdated = list.map(listItem => {\n        if (listItem.id === player.id) {\n            return player\n        } else {\n            return listItem\n        }\n    })\n\n    // assigns the new array of objects to the players array, overwriting the old one.\n    return {\n        ...state,\n        players: playersUpdated\n    };\n};\n\n// returns a new array of objects without the player object with the corresponding id and overwrites the existing players array\nconst removePlayer = (state, { id }) => {\n    return {\n        ...state,\n        players: state.players.filter(player => player.id !== id)\n    };\n};\n\n// takes the players array which has now been assigned team numbers for each player and overwrites the previous array with unassigned teams\nconst makeTeams = (state, { players }) => {\n    return {\n        ...state,\n        players: players,\n    };\n};\n\n// Settings reducer\n\n// takes the values the user has submitted upon saving settings and assigns them to their corresponding properties in global state, all done on the front end\nconst setSettings = (state, { settings }) => {\n    return {\n        ...state,\n        team_one_name: settings.team_one_name,\n        team_two_name: settings.team_two_name,\n        team_one_colour: settings.team_one_colour,\n        team_two_colour: settings.team_two_colour,\n    };\n};\n\n// History reducers\n\n// assigns the array of match objects saved in the db to the history property, loaded is changed to true making history component show on the screen\nconst saveHistory = (state, { history }) => {\n    return {\n        ...state,\n        history: history,\n        loaded: true\n    };\n};\n\nconst addMatchToHistory = (state, { match }) => {\n    return {\n        ...state,\n        history: [...state.history, match]\n    };\n};\n\n// resets history to an empty array while preserving rest of the current state\nconst resetHistory = (state) => {\n    return {\n        ...state,\n        history: []\n    };\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"SET_PLAYERS\": return setPlayers(state, action);\n        case \"ADD_PLAYER\": return addPlayer(state, action);\n        case \"EDIT_PLAYER\": return editPlayer(state, action);\n        case \"REMOVE_PLAYER\": return removePlayer(state, action);\n        case \"RESET_PLAYERS\": return initial;\n        case \"MAKE_TEAMS\": return makeTeams(state, action);\n        case \"SET_TEAM_SETTINGS\": return setSettings(state, action);\n        case \"SAVE_HISTORY\": return saveHistory(state, action);\n        case \"ADD_MATCH\": return addMatchToHistory(state, action);\n        case \"RESET_HISTORY\": return resetHistory(state);\n        default: return state;\n    }\n};\n\nexport default reducer;","import reducer from \"./reducers\";\nimport initial from \"./initial\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\n\n// provider and store\nimport { Provider } from \"react-redux\";\nimport store from \"./data/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}